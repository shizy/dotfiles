#!/bin/bash

# Only supports up to 3 monitors!

source $XDG_CONFIG_HOME/zsh/.zprofile

WM_FIFO=$XDG_RUNTIME_DIR/wm.fifo
declare -A monitor
primary=''
urg='%{F'$COLOR_URGENT'}'
cur='%{F'$COLOR_NOTIFY'}'
occ='%{F#383838}'
res='%{F-}'

setup_monitors() {
    output=$(xrandr)
    layouts=(${MONITOR_LAYOUTS//:/ })
    desktops=(5 6 7 8 9 0)
    optimal_res=($(grep -zoP '(?s)\ connected.*?\s{2,}\K\w+\s' <<< "$output"))
    screen_name=($(grep -oP '^\w+(?=\ (dis)?connected)' <<< "$output"))
    connections=($(grep -oP '(dis)?connected' <<< "$output"))
    primary=${screen_name[0]}

    conns=1
    xrandr --output $primary --mode ${optimal_res[0]}
    bspc monitor $primary -d 1 2 3 4

    for num in ${!screen_name[*]}
    do
        # skip the primary monitor, and any connected monitor over 3
        [ $num -eq 0 ] || [ $conns -ge 3 ] && continue
        if [ "${connections[$num]}" == "connected" ]; then
            xrandr --output ${screen_name[$num]} ${layouts[$((conns-1))]} $primary --mode ${optimal_res[$conns]}
            bspc monitor ${screen_name[$num]} -d ${desktops[@]:$(((conns-1)*3)):${#desktops[@]}}
            ((conns++))
        else
            xrandr --output ${screen_name[$num]} --off
        fi
    done

    [ $conns -eq 1 ] &&
        bspc monitor $primary -d 1 2 3 4 ${desktops[@]}
}

get_monitor_info() {
    monitors=($(bspc query -M))
    query=$(xrandr | grep \ connected)
    #primary="${monitors[0]}"
    for name in "${monitors[@]}"
    do
        monitor[$name]=$(grep $name <<< "$query" | grep -oP '\w+x\w+\+\w+\+\w+' | sed -e 's/[x|+]/\ /g')
    done
}

show () {
    [ ${#monitor[@]} -eq 1 ] && res=($(get_preset $1 $primary)) || res=($(get_preset $1 $(bspc query -M -m)))
    xdotool search --any --class --name $1 windowmap windowmove ${res[0]} ${res[1]} windowsize ${res[3]} ${res[2]}
}

hide () {
    bspc node $(printf "0x%x\n" $(xdotool search --any --class --name $1) | head -n 1) -d focused -f
    [ $? -gt 0 ] &&
         xdotool search --onlyvisible --any --class --name $1 windowunmap %@
}

create () {
    [ ${#monitor[@]} -eq 1 ] && res=($(get_preset $1 $primary)) || res=($(get_preset $1 $(bspc query -M -m)))
    [ $2 ] && cmd=" -e $2 &" || cmd=''
    exec ${res[@]:4} $cmd &
    xdotool search --any --class --name $1 windowmap windowmove ${res[0]} ${res[1]} windowsize ${res[3]} ${res[2]}
}

get_preset() {
    res=(${monitor[$2]})
    w_top=$((${res[3]} + 1))
    w_left=${res[2]}
    #res [width][height][x offset][y offset]

    case $1 in
        "scratchtop")
            x=$w_left
            y=$w_top
            h=$((${res[1]} / 2))
            w=${res[0]}
            create="termite --geometry ${w}x${h}+${x}+${y} --title=$1"
            ;;
        "scratchbottom" | "scratchsearch")
            x=$w_left
            y=$(((${res[1]} / 2) + $w_top))
            h=$((${res[1]} / 2))
            if [ $1 == "scratchsearch" ]; then
                y=$((${res[1]} - (${res[1]} / 3) + $w_top))
                h=$((${res[1]} / 3))
            fi
            w=${res[0]}
            create="termite --geometry ${w}x${h}+${x}+${y} --title=$1"
            ;;
        "scratchleft")
            x=$w_left
            y=$w_top
            h=${res[1]}
            w=$((${res[0]} / 2))
            create="termite --geometry ${w}x${h}+${x}+${y} --title=$1"
            ;;
        "scratchright")
            x=$((${res[0]} / 2))
            y=$w_top
            h=${res[1]}
            w=$((${res[0]} / 2))
            create="termite --geometry ${w}x${h}+${x}+${y} --title=$1"
            ;;
        "panel")
            x=$(($w_left + ((${res[0]} * 13) / 100)))
            y=0
            h=18
            w=$(((${res[0]} * 74) / 100))
            create=""
            ;;
    esac
    echo "$x $y $h $w $create"
}

if [ "$1" == "service" ]; then

    [ ! -e $WM_FIFO ] && mkfifo $WM_FIFO
    #give xrandr time to detect plugged / unplugged monitor
    sleep 2
    setup_monitors
    get_monitor_info

    # WM commands
    while true
    do
        if read line <$WM_FIFO; then
            arg=($line)
            case ${arg[0]} in
                "show") show ${arg[1]} || create ${arg[@]:1};;
                "hide") hide ${arg[1]};;
                "restart") systemctl --user restart wm;;
                *) hide ${arg[0]} || show ${arg[0]} || create ${arg[@]};;
            esac
        fi
    done &

    icons=(${DESKTOP_ICONS//:/ })
    dim=($(get_preset panel $primary))

    while read line; do

        case $line in
            # bspc
            W*)
                wm=""
                dtop=1
                desktops=($(grep -oP '(?<=:)([a-zA-Z](Desktop)?[0-9])|LT(?=:)' <<< "$line"))
                datetime=$(date "+%h %d, %I:%M%P")

                for desktop in ${desktops[@]}
                do
                    icon=${icons[$(($dtop - 1))]}

                    case $desktop in
                        "o"*) wm+="$occ  $icon  $res";;
                        "O"*|"F"*)
                            [ ${#monitor[@]} -gt 1 ] && [[ ${desktop:1} == $(bspc query -D -d) ]] &&
                                wm+="${cur} $icon ${res}" ||
                                wm+="${cur}  $icon  ${res}"
                            ;;
                        "u"*|"U"*)
                            wm+="$urg  $icon  $res"
                            wm show panel
                            ;;
                        "L"*)
                            [ ${#monitor[@]} -gt 1 ] &&
                                wm+="%{O25}"
                                dtop=$(($dtop - 1))
                    esac
                    dtop=$(($dtop + 1))
                done
                ;;
            #conky
            c*)
                stat=$(cut -c 2- <<< "$line" | sed -e "s/!!/%{F$COLOR_URGENT}/g" -e "s/!-/%{F-}/g")
                ;;
            t*)
                clock=$(cut -c 2- <<< "$line")
                ;;
        esac

        l="%{l} $stat"
        c="%{c} $wm "
        r="%{r}%{F-}$clock  "
        printf "%s\n" "$l$c$r"

    done < <(\
        bspc subscribe & \
        conky -c $XDG_CONFIG_HOME/conky/status.conf & \
        conky -c $XDG_CONFIG_HOME/conky/time.conf \
    ) | lemonbar -p -d -g ${dim[3]}x${dim[2]}+${dim[0]}+${dim[1]} -f "$FONT_ICON-10" -f "$FONT_MONO-7" -B $COLOR_NORMAL -F "#000" -n "panel" &

    wait
else
    echo $@ >$WM_FIFO
fi
